# -*- coding: utf-8 -*-
import os

# Form implementation generated from reading ui file '国际运单单号识别.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import pandas as pd
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QSettings
from PyQt5.QtWidgets import QFileDialog, QApplication, QMessageBox

import OCR


class Ui_MainWindow(object):

    def __init__(self):
        self.file_path = ''
        self.API_KEY = ''
        self.SECRET_KEY = ''

        # 创建 QSettings 对象，指定组织名称和应用程序名称
        self.settings = QSettings("personal", "国际运单箱号识别")

    def show_message_box(self):
        # 模拟程序执行完成后弹出消息框
        QMessageBox.information(self.parent(), "任务完成", "程序执行完成！", QMessageBox.Ok)

    def save_settings(self):
        # 保存用户输入的信息
        self.settings.setValue("API_KEY", self.API_KEY)
        self.settings.setValue("SECRET_KEY", self.SECRET_KEY)

    def load_settings(self):
        # 从设置中读取用户输入的信息
        self.API_KEY = self.settings.value("API_KEY", "")
        self.SECRET_KEY = self.settings.value("SECRET_KEY", "")
        self.lineEdit.setText(self.API_KEY)
        self.lineEdit_2.setText(self.SECRET_KEY)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(436, 341)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setObjectName("label")
        self.gridLayout_2.addWidget(self.label, 0, 0, 1, 1)
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setObjectName("lineEdit")
        self.gridLayout_2.addWidget(self.lineEdit, 0, 1, 1, 1)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.gridLayout_2.addWidget(self.lineEdit_2, 3, 1, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_2.addItem(spacerItem, 7, 1, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_2.addItem(spacerItem1, 4, 1, 1, 1)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.gridLayout_2.addWidget(self.pushButton_2, 10, 1, 1, 1)
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.gridLayout_2.addWidget(self.lineEdit_3, 5, 1, 1, 1)
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setObjectName("pushButton_3")
        self.gridLayout_2.addWidget(self.pushButton_3, 10, 0, 1, 1)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.gridLayout_2.addWidget(self.pushButton, 5, 0, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setObjectName("label_2")
        self.gridLayout_2.addWidget(self.label_2, 3, 0, 1, 1)
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setObjectName("textEdit")
        self.gridLayout_2.addWidget(self.textEdit, 6, 0, 1, 2)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_2.addItem(spacerItem2, 1, 1, 1, 1)
        self.gridLayout.addLayout(self.gridLayout_2, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # 连接按钮点击事件到文件选择逻辑
        self.pushButton.clicked.connect(self.show_file_dialog)

        # 连接LineEdit的textChanged信号到处理函数
        self.lineEdit_3.textChanged.connect(self.update_filepath)

        # 连接LineEdit的textChanged信号到处理函数
        self.lineEdit.textChanged.connect(self.update_api_key)

        # 连接LineEdit的textChanged信号到处理函数
        self.lineEdit_2.textChanged.connect(self.update_secret_key)

        # 连接退出按钮点击事件到退出应用程序
        self.pushButton_3.clicked.connect(QApplication.instance().quit)

        import OCR
        # 连接开始识别按钮点击事件到ocr程序
        self.pushButton_2.clicked.connect(self.start_ocr)

        self.load_settings()


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "国际运单单号识别"))
        self.label.setText(_translate("MainWindow", " API_KEY"))
        self.pushButton_2.setText(_translate("MainWindow", "开始识别"))
        self.pushButton_3.setText(_translate("MainWindow", "退出"))
        self.pushButton.setText(_translate("MainWindow", "选择文件"))
        self.label_2.setText(_translate("MainWindow", " SECRET_KEY"))

    def show_file_dialog(self):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog

        # 显示文件对话框
        self.file_path, _ = QFileDialog.getOpenFileName(None, "选择文件", "", "All Files (*)", options=options)

        if self.file_path:
            # 在LineEdit中显示所选文件的路径
            self.lineEdit_3.setText(self.file_path)

    def update_filepath(self):
        self.file_path = self.lineEdit_3.text()

    def update_api_key(self):
        self.API_KEY = self.lineEdit.text()

    def update_secret_key(self):
        self.SECRET_KEY = self.lineEdit_2.text()

    def show_completion_message(self):
        QMessageBox.information(self, "处理完成", "文件处理完成！", QMessageBox.Ok)

    def start_ocr(self):
        # 清空之前显示的状态信息
        self.textEdit.clear()

        # 调用 OCR 进行处理
        self.ocr(self.file_path, self.API_KEY, self.SECRET_KEY)

        # OCR 处理完成后显示提示框
        # self.show_completion_message()

        # 保存信息
        self.save_settings()

    def img_ocr(self, file_path, api_key, secret_key):  # 源文件为img格式
        # API_KEY = "D0qFZqOqpnRNOGrBq0G2Wj2j"
        # SECRET_KEY = "Fhli240Lwzqdt9oVr7SNaG21d9GwoXfQ"

        base64img = OCR.code_img(file_path)
        json_file = OCR.request_ocr(base64img, api_key, secret_key)
        result_list = OCR.extract_words_from_json(json_file)
        print(result_list)
        odd_num = OCR.find_matching_strings(result_list)
        self.append_text(f"匹配到的箱号列表:{odd_num}\n")
        print("匹配到的箱号列表:", odd_num)

    def pdf_ocr(self, file_path, api_key, secret_key):  # 源文件为pdf格式
        # API_KEY = "D0qFZqOqpnRNOGrBq0G2Wj2j"
        # SECRET_KEY = "Fhli240Lwzqdt9oVr7SNaG21d9GwoXfQ"

        result_dict = {}
        from pdf2img import PDFTransformer

        transformer = PDFTransformer()
        transformer.pdf2img(file_path)

        imgs = OCR.get_files_in_directory(transformer.output_folder)

        for img in imgs:
            base64img = OCR.code_img(img)
            json_file = OCR.request_ocr(base64img, api_key, secret_key)
            result_list = OCR.extract_words_from_json(json_file)
            # print(result_list)
            odd_num = OCR.find_matching_strings(result_list)
            img_name = os.path.splitext(os.path.basename(img))[0]
            self.append_text(f"{img_name} 匹配到的箱号列表: {odd_num}\n")
            print(odd_num)
            if len(odd_num) >= 1:
                result_dict[img_name] = odd_num[0]
            else:
                result_dict[img_name] = "未识别"
            print(img_name, "匹配到的箱号列表:", odd_num)
        print(result_dict)
        # 将字典转换为 DataFrame
        result_df = pd.DataFrame(list(result_dict.items()), columns=['img', 'odd'])
        result_df.to_excel(f'{transformer.pdf_filename}箱号识别.xlsx')

    def ocr(self,file_path, api_key, secret_key):
        if OCR.is_img(file_path):
            self.img_ocr(file_path, api_key, secret_key)
        elif OCR.is_pdf(file_path):
            self.pdf_ocr(file_path, api_key, secret_key)

        self.show_message_box()

    def append_text(self, text):
        # 追加文本到 QTextEdit
        self.textEdit.insertPlainText(text)


import sys

if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    MainWindows = QtWidgets.QMainWindow()  # 创建窗体对象
    ui = Ui_MainWindow()  # 创建PyQt设计的窗体对象
    ui.setupUi(MainWindows)  # 调用PyQt窗体的方法对窗体对象进行初始化设置
    MainWindows.show()  # 显示窗体
    sys.exit(app.exec_())  # 程序关闭时退出进程
